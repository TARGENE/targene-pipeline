includeConfig 'base.config'
includeConfig 'container.config'

// Define the number of CPUs based on memory requested
def calculateCpus(memory) {
    def mem = memory instanceof MemoryUnit ? memory.toMega() : memory.toInteger()
    return Math.max(1, Math.ceil(mem / 6144).intValue()) // 6144 MB = 6 GB
}

process {
    // Override CPUs based on task memory
    cpus = { calculateCpus(task.memory) }

    withLabel: multithreaded {
        cpus = { Math.max(2, calculateCpus(task.memory)) }
    }

    withLabel: bigmem {
        cpus = { calculateCpus(task.memory) }
    }

    // Set google appropriate error strategy
    errorStrategy = {task.exitStatus in [143,137,104,134,139,14,140,151] ? 'retry' : 'finish'}
    maxRetries = 3

    // Base container required when running only through docker only
    container = "us-central1-docker.pkg.dev/all-of-us-rw-prod/aou-rw-gar-remote-repo-docker-prod/${base_image_version}"

    withLabel: simulation_image {
        container = "us-central1-docker.pkg.dev/all-of-us-rw-prod/aou-rw-gar-remote-repo-docker-prod/${simulation_image_version}"
    }
    withLabel: targenecore_image {
        container = "us-central1-docker.pkg.dev/all-of-us-rw-prod/aou-rw-gar-remote-repo-docker-prod/${targenecore_image_version}"
    }
    withLabel: ukb_image {
        container = "us-central1-docker.pkg.dev/all-of-us-rw-prod/aou-rw-gar-remote-repo-docker-prod/${ukb_image_version}"
    }
    withLabel: tmle_image {
        container = "us-central1-docker.pkg.dev/all-of-us-rw-prod/aou-rw-gar-remote-repo-docker-prod/${tmle_image_version}"
    }
    withLabel: plink_image {
        container = "us-central1-docker.pkg.dev/all-of-us-rw-prod/aou-rw-gar-remote-repo-docker-prod/${plink_image_version}"
    }
    withLabel: pca_image {
        container = "us-central1-docker.pkg.dev/all-of-us-rw-prod/aou-rw-gar-remote-repo-docker-prod/${pca_image_version}"
    }
}
